# monitoring/grafana-deployment.yaml
# Description: Basic Kubernetes deployment for Grafana.

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  labels:
    app: grafana
data:
  prometheus.yaml: |-
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus-service:9090 # Assumes Prometheus service is named prometheus-service
      access: proxy
      isDefault: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:9.5.1 # Use a specific version
          ports:
            - containerPort: 3000
              name: http-grafana
          resources:
            limits:
              memory: "1Gi"
              cpu: "1000m"
            requests:
              memory: "500Mi"
              cpu: "500m"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources-volume
              mountPath: /etc/grafana/provisioning/datasources
            # - name: grafana-dashboards-volume # For dashboard provisioning
            #   mountPath: /etc/grafana/provisioning/dashboards
      volumes:
        - name: grafana-storage
          emptyDir: {} # For simplicity; use PersistentVolume in production
        - name: grafana-datasources-volume
          configMap:
            name: grafana-datasources
        # - name: grafana-dashboards-volume # Mount dashboard ConfigMaps here
        #   configMap:
        #     name: grafana-dashboards-provider

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: http-grafana
  type: NodePort # Or LoadBalancer for external access